---
####################################################
#
# Phase 2: Basic OS Setup
#
# This playbook covers the following configuration steps
#  - subscription and repositories
#  - network setup
#  - storage customization

# For our demo, we do not need to install additional packages,
# configure special services, monitoring and backup etc.
# we are good with what the standard image provides

# We need to provide this script the storage configuration
# for each machine. Hence we need to extend the dictionary "server_def"
# with its individual storage configuration for the second disk, e.g.:

#   server_def:
#           - name: server-name
#             [...]
#             storage_pools:
#               - name: volume_name
#                 disks:
#                  - sdb
#                 volumes:
#                   - name: data
#                     size: "128 GiB"
#                     mount_point: "/hana/data"
#                     fs_type: xfs
#                     state: present
#                   - name: log
#                     size: "64 GiB"
#                     mount_point: "/hana/log"
#                     fs_type: xfs
#                     state: present

# Have a look at the documention of the storage role for more configuration options

- name: Ensure Servers are booted and reachable
  hosts: hanas, s4hanas
  gather_facts: false
  become: false
  tasks:
  - name: Wait for SSH to come up
    wait_for:
      host: "{{ ansible_host }}"
      port: 22
      delay: 10
      state: started
      timeout: 480
    delegate_to: localhost

- name: Phase 2 - basic OS Setup
  hosts: hanas, s4hanas
  become: true

  tasks:

    # This picks the correct storage configuration for host inventory_hostname out of the server_def dict
    - name: get storage pool setup from server definition
      set_fact:
         storage_pools: "{{ server_def | selectattr('name', 'equalto', inventory_hostname) | sum(attribute='storage_pools', start=[]) }}"

    - name: Ensure storage is configured correctly
      include_role:
        name: redhat.rhel_system_roles.storage

    - name: NFS client is installed
      dnf:
         name:
           - nfs-utils
         state: present

    - name: Ensure Mountpoint exists
      file:
         path: "{{ nfs_archive_dir }}"
         state: directory
         mode: '0755'

    - name: Ensure NFS Server with SAP install software is mounted
      ansible.posix.mount:
        src: "{{ nfs_server }}:{{ nfs_export_dir }}"
        path: "{{ nfs_archive_dir }}"
        opts: rw,sync,hard,noatime
        fstype: nfs
        state: present

